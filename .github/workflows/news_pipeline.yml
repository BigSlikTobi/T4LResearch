name: T4L News Processing Pipeline

# Run on main branch pushes, schedule, or manual trigger
on:
  push:
    branches: [ main ]
  schedule:
    - cron: '*/20 * * * *'  # Run every 20 minutes
  workflow_dispatch:  # Manual trigger

# Environment variables
env:
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

jobs:
  # Job 1: Fetch news articles and count unprocessed entries
  fetch_news:
    name: Fetch News
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      unprocessed_count: ${{ steps.fetch_news.outputs.unprocessed_count }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Install Playwright
        run: playwright install --with-deps
          
      - name: Verify environment variables
        run: |
          echo "SUPABASE_URL is set: $([ -n "$SUPABASE_URL" ] && echo true || echo false)"
          echo "SUPABASE_KEY is set: $([ -n "$SUPABASE_KEY" ] && echo true || echo false)"
          echo "OPENAI_API_KEY is set: $([ -n "$OPENAI_API_KEY" ] && echo true || echo false)"
          echo "GEMINI_API_KEY is set: $([ -n "$GEMINI_API_KEY" ] && echo true || echo false)"
          
      - name: Fetch news articles
        id: fetch_news
        run: |
          # Execute news fetching script
          python -m getArticles.fetchNews > fetch_news.log 2>&1
          
          # Create script to count unprocessed articles
          python - <<EOF
          import sys
          try:
              from supabase_init import SupabaseClient
              from createArticles.fetchUnprocessedArticles import get_unprocessed_articles
              
              client = SupabaseClient()
              unprocessed = get_unprocessed_articles()
              count = len(unprocessed)
              print(f"Found {count} unprocessed articles")
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  f.write(f"unprocessed_count={count}\n")
          except Exception as e:
              print(f"Error checking unprocessed articles: {e}", file=sys.stderr)
              sys.exit(1)
          EOF

  # Job 2: Process the unprocessed articles
  process_articles:
    name: Process Articles
    runs-on: ubuntu-latest
    needs: fetch_news
    if: ${{ needs.fetch_news.outputs.unprocessed_count > 0 }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Install Playwright
        run: playwright install --with-deps
        
      - name: Process articles
        run: |
          echo "Processing ${needs.fetch_news.outputs.unprocessed_count} articles"
          python -m createArticles.runSequentialPipeline

  # Job 3: Update article statuses (run even if previous jobs fail)
  update_status:
    name: Update Article Status
    runs-on: ubuntu-latest
    needs: [fetch_news, process_articles]
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Report job status
        run: |
          echo "Previous jobs status:"
          echo "fetch_news: ${{ needs.fetch_news.result }}"
          echo "process_articles: ${{ needs.process_articles.result }}"
          
      - name: Update article statuses
        run: |
          python - <<EOF
          import traceback
          try:
              from createArticles.storeInDB import update_article_statuses
              update_article_statuses()
              print("Article statuses updated successfully")
          except Exception as e:
              print(f"Update article status failed: {e}")
              traceback.print_exc()
          EOF